<?php
/**
 * Copyright 2015 Carlo Nicora
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @license Apache
 * @license http://www.apache.org/licenses/LICENSE-2.0
 * @package CarloNicora\cryogen
 * @author Carlo Nicora
 */

namespace CarloNicora\cryogen\mySqlCryogen;

use CarloNicora\cryogen\cryogen;
use CarloNicora\cryogen\entity;
use CarloNicora\cryogen\entityList;
use CarloNicora\cryogen\queryEngine;
use CarloNicora\cryogen\dataController;

class mySqlDataController extends dataController{

    /** @var $connectionController mySqlConnectionController */
    protected $connectionController;

    /** @var $cryogen cryogen */
    protected $cryogen;

    private $sqlStatement;
    private $sqlParameters;

    public function __construct($connectionController, $cryogen){
        $this->connectionController = $connectionController;
        $this->cryogen = $cryogen;
    }

    public function update($entity, $level = 0, $metaTableCaller=NULL, $metaFieldCaller=NULL){
        $returnValue = TRUE;

        $skipSave = TRUE;

        if (isset($entity) && gettype($entity) != "array" &&  $entity->isEntityList) {
            $entityList = $entity;
        } else {
            if (gettype($entity) != "array"){
                $entityList = [];
                $entityList[] = $entity;
            } else {
                $entityList = $entity;
            }
        }

        $this->connectionController->connect();

        /** @var $entity entity */
        foreach ($entityList as $entity){
            if ($entity->status() != 1){
                $skipSave = FALSE;

                /** @var $engine queryEngine */
                $engine = $this->cryogen->generateQueryEngine(NULL, $entity);

                if (!isset($this->sqlStatement)){
                    $sqlStatement = $entity->status() == 0 ? $engine->generateInsertStatement() : $engine->generateUpdateStatement();
                    $sqlParameters = $entity->status() == 0 ? $engine->generateInsertParameters() : $engine->generateUpdateParameters();
                } else {
                    $sqlStatement = $this->sqlStatement;
                    $sqlParameters = $this->sqlParameters;
                }

                $autoGeneratedId = $entity->status() == 0 ? $engine->hasAutoIncrementKey() : FALSE;
                if ($autoGeneratedId){
                    $keyField = $engine->getAutoIncrementKeyName();
                    $returnValue = $this->setActionTransaction($sqlStatement, $sqlParameters, $autoGeneratedId);
                    $entity->$keyField = $autoGeneratedId;
                } else {
                    $returnValue = $this->setActionTransaction($sqlStatement, $sqlParameters, $autoGeneratedId);
                }

                if (!$returnValue){
                    break;
                }
            }
        }

        if ($returnValue && $level > 0){
            foreach ($entityList as $entity){
                $engine = $this->cryogen->generateQueryEngine(NULL, $entity);
                if (isset($engine->meta->relations) && sizeof($engine->meta->relations) > 0){
                    foreach ($engine->meta->relations as $relation){
                        $targetName = $relation->target;
                        if ((!isset($metaFieldCaller) && !isset($metaTableCaller)) || ($metaFieldCaller != $relation->linkedField && $metaTableCaller != $relation->linkedTable)){
                            if ($relation->relationType == 0){
                                $childrenExist = isset($entity->$targetName);
                            } else {
                                $childrenExist = (isset($entity->$targetName) && sizeof($entity->$targetName) > 0);
                            }
                            if($childrenExist){
                                //$target = $entity->$targetName;
                                $returnValue = $this->update($entity->$targetName, $level - 1, $relation->table, $relation->field);
                                if (!$returnValue){
                                    break;
                                }
                            }
                        }
                    }
                    if (!$returnValue){
                        break;
                    }
                }
            }
        }

        if (!$skipSave){
            if ($returnValue){
                $returnValue = $this->completeActionTransaction($returnValue);
            } else {
                $this->completeActionTransaction($returnValue);
            }
        }

        if ($returnValue){
            foreach ($entityList as $entity){
                $entity->setInitialValues();
                $entity->setRetrieved();
            }
        }

        return($returnValue);
    }

    /**
     * @param entity $entity
     * @param queryEngine $engine
     * @return bool
     */
    public function delete($entity, $engine = NULL){
        $returnValue = FALSE;

        if (isset($entity) && gettype($entity) != "array" &&  $entity->isEntityList) {
            $entityList = $entity;
        } else {
            if (isset($entity)){
                if (gettype($entity) != "array"){
                    $entityList = [];
                    $entityList[] = $entity;
                } else {
                    $entityList = $entity;
                }
            } else {
                $entityList = [];
                $entityList[] = NULL;
            }
        }

        $this->connectionController->connect();

        foreach ($entityList as $entity){
            if (isset($entity)){
                $engine = $this->cryogen->generateQueryEngine(NULL, $entity);
            }

            if (!isset($this->sqlStatement)){
                $sqlStatement = $engine->generateDeleteStatement();
                $sqlParameters = $engine->generateDeleteParameters();
            } else {
                $sqlStatement = $this->sqlStatement;
                $sqlParameters = $this->sqlParameters;
            }

            $null = '';
            $returnValue = $this->setActionTransaction($sqlStatement, $sqlParameters, $null, true);

            if (!$returnValue){
                break;
            }
        }

        if ($returnValue){
            $returnValue = $this->completeActionTransaction($returnValue);
        } else {
            $this->completeActionTransaction($returnValue);
        }

        return($returnValue);
    }

    public function read(queryEngine $engine, $level=0, $metaTableCaller=NULL, $metaFieldCaller=NULL){
        //$returnValue = [];
        //$returnValue = new entityList();

        $this->connectionController->connect();

        if (!isset($this->sqlStatement)){
            $sqlStatement = $engine->generateReadStatement();
            $sqlParameters = $engine->generateReadParameters();
        } else {
            $sqlStatement = $this->sqlStatement;
            $sqlParameters = $this->sqlParameters;
        }

        $returnValue = $this->setReadTransaction($engine, $sqlStatement, $sqlParameters);

        if ($level > 0 && ($returnValue && sizeof($returnValue) > 0)){
            if (isset($engine->meta->relations) && sizeof($engine->meta->relations) > 0){
                foreach ($engine->meta->relations as $relation){
                    $relationTarget = $relation->target;
                    if ((!isset($metaFieldCaller) && !isset($metaTableCaller)) || ($metaFieldCaller != $relation->linkedField || $metaTableCaller != $relation->linkedTable)){
                        $engine = NULL;
                        eval("\$engine = \$this->cryogen->generateQueryEngine(" . $relation->linkedTable . "::\$table);");
                        foreach($returnValue as $parentEntity){
                            $fieldName = '';
                            eval("\$fieldName = " . $relation->table . "::\$" . $relation->field . "->name;");
                            $keyValue = $parentEntity->$fieldName;
                            eval("\$engine->setDiscriminant(" . $relation->linkedTable . "::\$" . $relation->linkedField . ", '" . $keyValue . "', \"=\", \" OR \");");
                        }
                        $childrenEntities = $this->read($engine, $level-1, $relation->table, $relation->field);
                        $engine = null;

                        $parentFieldName = '';
                        $childFieldName = '';
                        eval("\$parentFieldName = " . $relation->table . "::\$" . $relation->field . "->name;");
                        eval("\$childFieldName = " . $relation->linkedTable . "::\$" . $relation->linkedField . "->name;");

                        foreach($returnValue as $parentEntity){
                            foreach ($childrenEntities as $childEntity){
                                $isFine = $parentEntity->$parentFieldName == $childEntity->$childFieldName;
                                if ($isFine){
                                    if ($relation->relationType == 0){
                                        $parentEntity->$relationTarget = $childEntity;
                                        break;
                                    } else {
                                        $parentEntity->{$relationTarget}[] = $childEntity;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return($returnValue);
    }

    public function count(queryEngine $engine){
        //$returnValue = 0;

        $this->connectionController->connect();

        if (!isset($this->sqlStatement)){
            $sqlStatement = $engine->generateReadCountStatement();
            $sqlParameters = $engine->generateReadParameters();
        } else {
            $sqlStatement = $this->sqlStatement;
            $sqlParameters = $this->sqlParameters;
        }

        $returnValue = $this->setCountTransaction($engine, $sqlStatement, $sqlParameters);

        return($returnValue);
    }

    protected function createTransaction(){
    }

    protected function setActionTransaction($sqlStatement, $sqlParameters, &$generatedId = FALSE, $isDelete = FALSE){
        $returnValue = FALSE;

        $this->cryogen->logScript($sqlStatement, $sqlParameters);

        if ($stmt = $this->connectionController->connection->prepare($sqlStatement)) {
            if (isset($sqlParameters) && sizeof($sqlParameters) > 0){
                $this->bindParameters($stmt, $sqlParameters);
            }
            $stmt->execute();

            $affectedRows = $stmt->affected_rows;
            $returnValue =  $affectedRows > 0;

            if (!$isDelete){
                if (!$returnValue && isset($this->connectionController->connection->error) && $this->connectionController->connection->error != ''){
                    $this->cryogen->log($this->connectionController->connection->error, $sqlStatement, $sqlParameters);
                } else {
                    if ($generatedId){
                        $generatedId = $stmt->insert_id;
                    }
                }
            }

            $stmt->close();
        } else {
            echo $this->connectionController->connection->error . "<br>" . $sqlStatement."<br>";
        }

        return($returnValue);
    }

    protected function completeActionTransaction($commit){
        if ($commit){
            $returnValue = $this->connectionController->connection->commit();
            if (!$returnValue && $this->connectionController->connection->errno == 0){
                $returnValue = true;
            }
        } else {
            $returnValue = false;
            $this->connectionController->connection->rollback();
        }
        return($returnValue);
    }

    // Not sure how to uneval this function yet -- colin
    protected function setReadTransaction(queryEngine $engine, $sqlStatement, $sqlParameters){
        $returnValue = new entityList();

        $this->cryogen->logScript($sqlStatement, $sqlParameters);

        if ($stmt = $this->connectionController->connection->prepare($sqlStatement)) {
            if (isset($sqlParameters) && sizeof($sqlParameters) > 0){
                $this->bindParameters($stmt, $sqlParameters);
            }

            $stmt->execute();

            $selectedFields = $engine->getFieldsVariables();
            $selectedDynamicFields = $engine->getDynamicFieldsVariables();
            $selectedFields = array_merge($selectedFields, $selectedDynamicFields);
            $fields = "";
            foreach ($selectedFields as $fieldName){
                $fields .= "\$" . $fieldName . ", ";
            }
            $fields = substr($fields, 0, strlen($fields)-2);

            eval("\$stmt->bind_result($fields);");

            $log = '';
            while ($stmt->fetch()){
                $record = null;

                /** @var $record entity */
                $record = new $engine->meta->object;

                $record->entityRetrieved = TRUE;

                foreach ($selectedFields as $fieldNameHere){
                    eval("\$record->" . $fieldNameHere . " = $" . $fieldNameHere . ";");
                    eval("\$log .= '|' . $" . $fieldNameHere . ";");
                }
                $log .= "|\r\n";
                $record->setInitialValues();

                $record->setRetrieved();

                $returnValue[] = $record;
            }

            if ($this->connectionController->connection->error){
                $this->cryogen->log($this->connectionController->connection->error, $sqlStatement, $sqlParameters);
            }

            $this->cryogen->logScriptResult($log);

            $stmt->close();
        }

        return($returnValue);
    }

    // Not sure how to uneval this function yet -- colin
    protected function setCountTransaction(queryEngine $engine, $sqlStatement, $sqlParameters){
        $returnValue = new entityList();

        if ($stmt = $this->connectionController->connection->prepare($sqlStatement)) {
            if (isset($sqlParameters) && sizeof($sqlParameters) > 0){
                $this->bindParameters($stmt, $sqlParameters);
            }

            $stmt->execute();

            /** @var $count int */
            $stmt->bind_result($count);

            while ($stmt->fetch()){
                $returnValue = $count;
                break;
            }

            $stmt->close();
        }

        return($returnValue);
    }

    private function bindParameters(&$statement, $parameters)
    {
        $paramString = array_shift($parameters);

        if ($paramString  == '')
        {
            return;
        }

        $bindParams[] = $paramString;
        //foreach($parameters[0] as $parameter=>$value)
        foreach($parameters[0] as $value) {
            $bindParams[] = $value;
        }

        call_user_func_array([$statement, 'bind_param'], $this->refValues($bindParams));
    }

    private function refValues($arr) {
        $refs = [];

        foreach ($arr as $key => $value) {
            $refs[$key] = &$arr[$key];
        }

        return $refs;
    }

    public function setManualSql($sqlStatement, $sqlParameters){
        $this->sqlStatement = $sqlStatement;
        $this->sqlParameters = $sqlParameters;
    }
}
?>